This project is primary for studying Hibernate interceptor, which is often used to implement some kind of audit
log. One important aspect is that interceptor can be in two different scopes: sessionFactory-scope or session-scope
In former case, you only need to inject the interceptor into a sessionFactory or transactionManager, which in lattere
case, you need to create new intercetor and pass it onto seesionFactory.openSession(interceptor). Also it is 
important to know that for sessionFactory-scope interceptor, since it is global scope, which is going to be 
shared cross multiple threads, it must be implemented in thread-safe manner. In this sense, you must not store
any session specific states in any instance fileds. Rather, a solution is store those states in thread local.

Reference:
https://forum.hibernate.org/viewtopic.php?f=7&t=963049


Hibernate Learn
1. When you put a @Transaction annotation on a class or method, and use declarative transaction(defined a HibernateTransactionManager as bean)
   then before the execution of the method, Spring proxy code invokes transactionManager.getTransaction() to begin a transaction. And after
   the method returns, transactionManager.commit() is invoked. While HibernateTransactionManager.getTransaction() will open a session and
   invoke session.beginTransaction(), HibernateTransactionManager.commit() will invoke transaction.commit() that in turn invokes session.flush
   to sync Hibernate in-memory store with real persistent datastore.
