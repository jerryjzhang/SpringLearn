This project is primary for studying Hibernate interceptor, which is often used to implement some kind of audit log. 
One important aspect is that interceptor can be in two different scopes: sessionFactory-scope or session-scope

In former case, you only need to inject the interceptor into a sessionFactory or transactionManager, which in latter case,
 you need to create new intercetor and pass it onto seesionFactory.openSession(interceptor). Also it is important to know 
 that for sessionFactory-scope interceptor, since it is global scope, which is going to be shared cross multiple threads, 
 it must be implemented in thread-safe manner. In this sense, you must not store any session specific states in any instance
  fileds. Rather, a solution is store those states in thread local.

Reference:
https://forum.hibernate.org/viewtopic.php?f=7&t=963049


Hibernate Learn
1. When you put a @Transaction annotation on a class or method, and use declarative transaction(defined a 
HibernateTransactionManager as bean) then before the execution of the method, Spring proxy code invokes 
transactionManager.getTransaction() to begin a transaction. And after the method returns, transactionManager.commit()
 is invoked. While HibernateTransactionManager.getTransaction() will open a session and invoke session.beginTransaction(), 
 HibernateTransactionManager.commit() will invoke transaction.commit() that in turn invokes session.flush to sync 
 Hibernate in-memory store with real persistent datastore.

2. You can specify QueryTimeOut in two ways:
   a. TransactionManager-level timeout: set defaultTimeout property of TransactionManager as:
  <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
		<property name="defaultTimeout" value="5"/>
	</bean>
  b. Transaction-level timeout: set timeout in @Transactional annotation as:
  @Transactional(readOnly = false, propagation = Propagation.REQUIRED, timeout = 1)
  
Transaction-level timeout value will override TransactionManager-level default timeout. Actually, when TransactionManager 
creates a timeout, it sets transaction.setTimeout(). When Hibernate get PreparedStatement, it will use this timeout value 
to set preparedStatement.setQueryTimeout, which will in turn be used by JDBC driver to apply this limit to the execute, 
executeQuery and executeUpdate methods.
   
3. Hibernate has in-memory persistent context(Session) and write-behind mechanism, 
   so only when actually sync with database does it hold database lock. However, 
   actual sync with database may happen in two cases:
   a. When the transaction is committed, session.flush() is invoked
   b. Some query statement after the write operation.
  
4. In DB2 at default isolation level, when updating a database row, only the row
   will be locked exclusively. Updating/Reading other rows will not be affected.
   However, if you issue some where condition in the select and the condition column
   is not indexed, the DBMS needs to scan every row in the table to see if the condition
   matches. Thus, when scanning to the locked row, the select statement will be blocked
   by the lock until the write operation commits. 