<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">
	
	

	<aop:aspectj-autoproxy />
<import resource="applicationContext-dao.xml"/>
	<!-- 1. We can make aspect class as a steoretype by marking @Compoent, 
		then use component-scan to let spring detect it
	 
	<context:component-scan base-package="com.junz.aop" />
    -->
    <!-- 2. Or we can explicitly create a bean for the aspect class -->
	
	<bean id="logAspect" class="com.junz.aop.aspect.LoggingAspect" />
	<bean id="profileAspect" class="com.junz.aop.aspect.ProfilingAspect" />
	 
	 <!-- For every bean in the context, aop will test if it meets any pointcut -->
	<bean id="advicedObject" class="com.junz.aop.target.AdvicedDomainObjectImpl" />
	


</beans>
